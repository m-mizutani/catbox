package model

import (
	"fmt"
	"strings"
)

// Scanner indicates who creates the report
type Scanner string

const (
	// ScannerTrivy indicates that report is generated by trivy
	ScannerTrivy Scanner = "trivy"
)

type VulnStatus string

const (
	// VulnStatusNew indicates the vulnerability is new one and not yet triage
	VulnStatusNew VulnStatus = "new"
	// VulnStatusIgnore indicates a team decided to not handle the vulnerability
	VulnStatusIgnore VulnStatus = "ignored"
	// VulnStatusMitigated indicates a team changed some configuration to reduce risk
	VulnStatusMitigated VulnStatus = "mitigated"
	// VulnStatusInProgress indicates a change to fix the vulnerability is in progress
	VulnStatusInProgress VulnStatus = "in-progress"
	// VulnStatusFixed indicates the vulnerability is fixed. This status is set by either scan result or a owner team
	VulnStatusFixed VulnStatus = "fixed"
	// VulnStatusRegressed indicates the vulnerability is regressed. This status can be transitioned from only VulnStatusFixed
	VulnStatusRegressed VulnStatus = "regressed"
)

// VulnInfo presents Vulnerability Information (title, package name, fixed version, etc)
type VulnInfo struct {
	ID          string
	Type        VulnType
	CVSS        map[string]string
	Title       string
	Description string
	References  []string
	DetectedAt  int64

	// [optional] Package info when Type == VulnPkg
	PkgType string
	PkgName string
}

// ScanReport presents S3 pointer of scan report
type ScanReport struct {
	ReportID  string
	StatusSeq int64

	TaggedImage
	ImageMeta

	// Scan log
	ScannedBy   Scanner
	RequestedAt int64
	RequestedBy string
	InvokedAt   int64
	ScannedAt   int64

	// Output to
	OutputTo S3Path
}

type VulnType string

const (
	VulnPkg VulnType = "pkg"
)

type RepoVulnEntry struct {
	VulnID   string
	VulnType VulnType

	// for VulnType = pkg
	PkgSource  string
	PkgName    string
	PkgVersion string
}

func (x *RepoVulnEntry) Key() string {
	return fmt.Sprintf("%s:%s:%s", x.VulnID, x.VulnType, x.TypeKey())
}

func (x *RepoVulnEntry) TypeKey() string {
	switch x.VulnType {
	case VulnPkg:
		if x.PkgSource == "" || x.PkgName == "" || x.PkgVersion == "" {
			panic(fmt.Sprintf("parameters of pkg TypeKey are not enough: %v", x))
		}
		return strings.Join([]string{x.PkgSource, x.PkgName, x.PkgVersion}, ":")
	default:
		panic("Invalid VulnType: " + x.VulnType)
	}
}

// RepoVulnStatus presents each vulnerability status of repository by repository (registry + repository + tag).
type RepoVulnStatus struct {
	TaggedImage
	RepoVulnEntry

	UpdatedAt   int64
	Status      VulnStatus
	DetectedBy  Scanner
	Description string
	StatusSeq   int64

	// Trivy based parameters
	PkgType         string
	PkgFixedVersion string
}

type RepoVulnChangeLog struct {
	TaggedImage
	RepoVulnEntry
	Status    VulnStatus
	UpdatedAt int64
	StatusSeq int64
}

// VulnStatusChange presents a result of comparing old and new image scan result
type VulnStatusChange struct {
	New *RepoVulnStatus
	Old *RepoVulnStatus
}
